# -*- coding: utf-8 -*-
"""arima_model2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PewHyLba682KOm8_SM0ZgCdGiQpDCXmw
"""

import os
import warnings
warnings.filterwarnings('ignore')
# import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima.model import ARIMA
import pmdarima as pm
# from sklearn.metrics import mean_squared_error, mean_absolute_error
# import math
import yfinance as yf
import datetime as dt

ticker = 'AAPL'

#Define the start and end date for the historical data
today = dt.datetime.now()
start = dt.date(today.year-1, today.month-5, today.day-16)
end = dt.date(today.year, today.month, today.day)

#Fetch data using yfinance download function.
df_close = yf.download(tickers=ticker, start=start, end=end, interval='1h',)[['Close']]

df_close

# df_close = stock_data[['Close']]

# Determine whether a series is stationary using the Augmented Dickey Fuller (ADF) Test
result = adfuller(df_close)
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])

train_data, test_data = df_close[:int(len(df_close)*0.9)], df_close[int(len(df_close)*0.9):]

# Use Auto ARIMA to find the best p,d,q parameters
model_autoARIMA = pm.auto_arima(train_data, start_p=0, start_q=0,
                      test='adf',       # use adftest to find optimal 'd'
                      max_p=3, max_q=3, # maximum p and q
                      m=1,              # frequency of series
                      d=None,           # let model determine 'd'
                      seasonal=False,   # No Seasonality
                      start_P=0, 
                      D=0, 
                      trace=True,
                      error_action='ignore',  
                      suppress_warnings=True, 
                      stepwise=True)
print(model_autoARIMA.summary())

# Extract best arima parameters
best_parameters = model_autoARIMA.get_params().get("order")
best_parameters

# Build Model
model = ARIMA(train_data, order=best_parameters)  
fitted = model.fit()  
print(fitted.summary())

# Construct the forecasts
fcast = fitted.get_forecast(len(test_data)).summary_frame()
fcast.index = test_data.index

# Plot
plt.figure(figsize=(12,5), dpi=100)
plt.plot(train_data, label='training')
plt.plot(test_data, label='actual')
plt.plot(fcast['mean'])

plt.fill_between(fcast.index, fcast['mean_ci_lower'], fcast['mean_ci_upper'], color='k', alpha=0.1)

plt.title('Forecast vs Actuals')
plt.legend(loc='upper left', fontsize=8)
plt.show()

forecast = fitted.forecast(len(test_data))
forecast

